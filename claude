import cv2
import numpy as np
import glob
import os
import matplotlib.pyplot as plt

# Define dataset path - update this to your new location
image_folder = r"C:\Users\jaikr\OneDrive\Desktop\COMPUTER VISION\ball_frames"

# Get list of image files (without debug prints)
rgb_images = sorted(glob.glob(os.path.join(image_folder, 'frame-*.png')))
gt_images = sorted(glob.glob(os.path.join(image_folder, 'frame-*_GT.png')))

# Filter out only RGB images (remove GT images from list)
rgb_images = [img for img in rgb_images if '_GT' not in img]

# Function to perform image segmentation
def segment_ball(image_path):
    image = cv2.imread(image_path)
    if image is None:
        print(f"Error reading image: {image_path}")
        return None
    
    # Apply Gaussian blur
    blurred = cv2.GaussianBlur(image, (5, 5), 0)
    hsv = cv2.cvtColor(blurred, cv2.COLOR_BGR2HSV)

    # Define HSV range for ball detection (adjustable)
    lower_bound = np.array([20, 100, 100])
    upper_bound = np.array([40, 255, 255])

    # Create mask using color thresholding
    mask = cv2.inRange(hsv, lower_bound, upper_bound)

    # Apply morphological operations
    kernel = np.ones((5, 5), np.uint8)
    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)
    mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)

    return mask

# Function to compute Dice Similarity Score (DSC)
def dice_score(pred, gt):
    intersection = np.sum(pred * gt)
    return (2. * intersection) / (np.sum(pred) + np.sum(gt) + 1e-6)

# Process all images and calculate DSC scores
dsc_scores = []
segmentation_results = []

for rgb_path in rgb_images:
    gt_path = rgb_path.replace('.png', '_GT.png')
    
    # Check if GT file exists
    if not os.path.exists(gt_path):
        print(f"Ground truth file not found: {gt_path}")
        continue
    
    # Read ground-truth mask
    gt_mask = cv2.imread(gt_path, cv2.IMREAD_GRAYSCALE)
    if gt_mask is None:
        print(f"Error reading ground truth mask: {gt_path}")
        continue
    _, gt_mask = cv2.threshold(gt_mask, 127, 1, cv2.THRESH_BINARY)

    # Perform segmentation
    pred_mask = segment_ball(rgb_path)
    if pred_mask is None:
        continue
    _, pred_mask = cv2.threshold(pred_mask, 127, 1, cv2.THRESH_BINARY)

    # Compute DSC score
    dsc = dice_score(pred_mask, gt_mask)
    dsc_scores.append(dsc)

    # Store results for visualization
    segmentation_results.append((rgb_path, dsc, pred_mask, gt_mask))

# Compute mean and standard deviation of DSC scores
if dsc_scores:
    mean_dsc = np.mean(dsc_scores)
    std_dsc = np.std(dsc_scores)
    print(f'Mean DSC Score: {mean_dsc:.4f}, Standard Deviation: {std_dsc:.4f}')
else:
    print("No valid DSC scores computed. Check your dataset path and file naming.")

# Sort results to get best and worst cases
if segmentation_results:
    segmentation_results.sort(key=lambda x: x[1])  # Sort by DSC score (ascending)
    worst_cases = segmentation_results[:min(5, len(segmentation_results))]  # Bottom 5 worst cases (or fewer)
    best_cases = segmentation_results[-min(5, len(segmentation_results)):]  # Top 5 best cases (or fewer)
else:
    worst_cases = []
    best_cases = []
    print("No segmentation results to display. Check your dataset path and file naming.")

# Function to plot segmentation results
def plot_results(cases, title):
    if len(cases) == 0:
        print(f"No cases to plot for: {title}")
        return
        
    fig, axes = plt.subplots(len(cases), 3, figsize=(10, 10))
    fig.suptitle(title, fontsize=14)
    
    # If there's only one case, axes won't be a 2D array
    if len(cases) == 1:
        axes = np.array([axes])
        
    for i, (img_path, dsc, pred_mask, gt_mask) in enumerate(cases):
        rgb_img = cv2.imread(img_path)
        rgb_img = cv2.cvtColor(rgb_img, cv2.COLOR_BGR2RGB)

        # Plot original image
        axes[i, 0].imshow(rgb_img)
        axes[i, 0].set_title(f"Original {os.path.basename(img_path)}")
        axes[i, 0].axis("off")

        # Plot predicted mask
        axes[i, 1].imshow(pred_mask, cmap="gray")
        axes[i, 1].set_title(f"Predicted Mask (DSC={dsc:.2f})")
        axes[i, 1].axis("off")

        # Plot ground-truth mask
        axes[i, 2].imshow(gt_mask, cmap="gray")
        axes[i, 2].set_title("Ground Truth Mask")
        axes[i, 2].axis("off")

    plt.tight_layout()
    plt.subplots_adjust(top=0.9)  # Adjust the top to make room for the title
    plt.show()

# Bar chart to display DSC values
def plot_dsc_bar_chart(dsc_scores):
    if not dsc_scores:
        print("No DSC scores to plot.")
        return
        
    plt.figure(figsize=(10, 6))
    plt.bar(range(len(dsc_scores)), dsc_scores, color='skyblue')
    plt.xlabel('Image Index', fontsize=12)
    plt.ylabel('Dice Similarity Score (DSC)', fontsize=12)
    plt.title('DSC Scores for Each Image', fontsize=14)
    plt.xticks(range(len(dsc_scores)), [f'Image {i+1}' for i in range(len(dsc_scores))], rotation=90)
    plt.ylim(0, 1)  # DSC score ranges from 0 to 1
    plt.grid(axis='y')
    plt.show()

# Display best and worst segmentation results
if segmentation_results:
    plot_results(best_cases, "Best Segmentation Results")
    plot_results(worst_cases, "Worst Segmentation Results")
    
    # Only plot the bar chart if there are scores
    if dsc_scores:
        plot_dsc_bar_chart(dsc_scores)
