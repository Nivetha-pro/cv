import cv2
import numpy as np
import os
import glob
import matplotlib.pyplot as plt
from skimage.measure import label, regionprops
import sys

# Define path to extracted folder containing images
extracted_folder = r"C:\Users\Student\Desktop\New folder\ball_frames"

# Find all PNG files
try:
    all_files = glob.glob(os.path.join(extracted_folder, "*.png"))
    if not all_files:
        print(f"No PNG files found in {extracted_folder}. Please check the path.")
        sys.exit(1)
except Exception as e:
    print(f"Error accessing directory: {e}")
    sys.exit(1)

# Separate RGB images and mask images
rgb_images = sorted([f for f in all_files if "_GT" not in f])
mask_images = sorted([f for f in all_files if "_GT" in f])

print(f"Found {len(rgb_images)} RGB images and {len(mask_images)} mask images.")

# Validate that we have matching pairs
if len(rgb_images) == 0 or len(mask_images) == 0:
    print("Error: Missing RGB images or mask images.")
    sys.exit(1)


def ball_segmentation(image_path):
    """Segment colored balls in an image using color-based thresholding."""
    # Load image
    img = cv2.imread(image_path)
    if img is None:
        print(f"Error: Could not read image {image_path}")
        return np.zeros((100, 100), dtype=np.uint8)  # Return empty mask if image can't be read
    
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    hsv = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)
    
    # Define color ranges for different balls
    masks = []
    # Red (two ranges because red wraps around in HSV)
    masks.append(cv2.inRange(hsv, np.array([0, 100, 100]), np.array([10, 255, 255])))
    masks.append(cv2.inRange(hsv, np.array([160, 100, 100]), np.array([180, 255, 255])))
    # Blue
    masks.append(cv2.inRange(hsv, np.array([100, 100, 100]), np.array([140, 255, 255])))
    # Green
    masks.append(cv2.inRange(hsv, np.array([40, 100, 100]), np.array([80, 255, 255])))
    # Yellow
    masks.append(cv2.inRange(hsv, np.array([20, 100, 100]), np.array([35, 255, 255])))
    # Orange
    masks.append(cv2.inRange(hsv, np.array([10, 100, 100]), np.array([20, 255, 255])))
    # Pink/purple
    masks.append(cv2.inRange(hsv, np.array([140, 50, 100]), np.array([170, 255, 255])))
    
    # Combine all masks
    combined_mask = np.zeros_like(masks[0])
    for mask in masks:
        combined_mask = combined_mask | mask
    
    # Clean up the mask
    kernel = np.ones((5, 5), np.uint8)
    mask_opened = cv2.morphologyEx(combined_mask, cv2.MORPH_OPEN, kernel)
    mask_closed = cv2.morphologyEx(mask_opened, cv2.MORPH_CLOSE, kernel)
    
    # Remove small noise regions
    labeled_mask = label(mask_closed)
    props = regionprops(labeled_mask)
    
    clean_mask = np.zeros_like(mask_closed)
    min_area = 200  # Minimum area to be considered a ball
    for prop in props:
        if prop.area >= min_area:
            clean_mask[labeled_mask == prop.label] = 255
    
    binary_mask = (clean_mask > 0).astype(np.uint8)
    return binary_mask


def calculate_dsc(pred_mask, gt_mask):
    """Calculate Dice Similarity Coefficient."""
    pred_mask = (pred_mask > 0).astype(np.uint8)
    gt_mask = (gt_mask > 0).astype(np.uint8)
    
    intersection = np.logical_and(pred_mask, gt_mask).sum()
    union = pred_mask.sum() + gt_mask.sum()
    
    # Avoid division by zero
    if union == 0:
        return 1.0 if intersection == 0 else 0.0
    
    dsc = (2. * intersection) / union
    return dsc


def parse_frame_number(filename):
    """Extract frame number from filename."""
    try:
        base_name = os.path.basename(filename)
        frame_part = base_name.replace("_GT", "").replace("frame-", "").replace(".png", "")
        return int(frame_part)
    except ValueError:
        print(f"Warning: Could not parse frame number from {filename}")
        return -1


def save_visualizations(results, mean_dsc, std_dsc, best_frames, worst_frames):
    """Save visualizations to disk."""
    output_dir = os.path.join(os.path.dirname(extracted_folder), "results")
    os.makedirs(output_dir, exist_ok=True)
    
    # Save DSC bar chart
    plt.figure(figsize=(14, 8))
    image_indices = sorted(results.keys())
    dsc_values = [results[idx]['dsc'] for idx in image_indices]
    
    plt.bar(image_indices, dsc_values, color='skyblue', edgecolor='navy')
    plt.xlabel('Image Number (Index)', fontsize=12)
    plt.ylabel('Dice Similarity Coefficient (DSC)', fontsize=12)
    plt.title(f'Segmentation Performance\nMean DSC: {mean_dsc:.4f} ± {std_dsc:.4f}', fontsize=14)
    plt.ylim(0, 1)
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, 'dsc_results.png'), dpi=300)
    plt.close()
    
    # Save best and worst results
    fig = plt.figure(figsize=(20, 24))
    plt.suptitle('Appendix: Five Best and Five Worst Results', fontsize=20)
    
    # Plot best results
    for i, frame_num in enumerate(best_frames):
        result = results[frame_num]
        rgb = cv2.imread(result['rgb_path'])
        rgb = cv2.cvtColor(rgb, cv2.COLOR_BGR2RGB)
        
        # Original image
        ax1 = plt.subplot(5, 4, i*2+1)
        ax1.imshow(rgb)
        ax1.set_title(f'Best #{i+1}: Frame {frame_num}', fontsize=12)
        ax1.axis('off')
        
        # Overlay
        ax2 = plt.subplot(5, 4, i*2+2)
        ax2.imshow(rgb)
        mask_rgb = np.zeros_like(rgb)
        mask_rgb[:,:,1] = result['pred_mask'] * 255  # Green channel
        ax2.imshow(mask_rgb, alpha=0.5)
        ax2.set_title(f'DSC: {result["dsc"]:.4f}', fontsize=12)
        ax2.axis('off')
    
    # Plot worst results
    for i, frame_num in enumerate(worst_frames):
        result = results[frame_num]
        rgb = cv2.imread(result['rgb_path'])
        rgb = cv2.cvtColor(rgb, cv2.COLOR_BGR2RGB)
        
        # Original image
        ax1 = plt.subplot(5, 4, (i+5)*2+1)
        ax1.imshow(rgb)
        ax1.set_title(f'Worst #{i+1}: Frame {frame_num}', fontsize=12)
        ax1.axis('off')
        
        # Overlay
        ax2 = plt.subplot(5, 4, (i+5)*2+2)
        ax2.imshow(rgb)
        mask_rgb = np.zeros_like(rgb)
        mask_rgb[:,:,1] = result['pred_mask'] * 255  # Green channel
        ax2.imshow(mask_rgb, alpha=0.5)
        ax2.set_title(f'DSC: {result["dsc"]:.4f}', fontsize=12)
        ax2.axis('off')
    
    plt.tight_layout(rect=[0, 0, 1, 0.97])
    plt.savefig(os.path.join(output_dir, 'best_worst_results.png'), dpi=300)
    plt.close()
    
    print(f"Visualizations saved to {output_dir}")


def process_images_and_display_results():
    """Process all images and display results on screen."""
    dsc_values = []
    results = {}
    
    # Match RGB images with their GT masks
    for rgb_path in rgb_images:
        frame_num = parse_frame_number(rgb_path)
        if frame_num < 0:
            continue
            
        # Find corresponding GT mask
        gt_path = None
        for mask_path in mask_images:
            if parse_frame_number(mask_path) == frame_num:
                gt_path = mask_path
                break
        
        if gt_path is None:
            print(f"Warning: No ground truth found for frame {frame_num}")
            continue
        
        try:
            # Process image
            pred_mask = ball_segmentation(rgb_path)
            gt_mask = cv2.imread(gt_path, cv2.IMREAD_GRAYSCALE)
            
            if gt_mask is None:
                print(f"Error: Could not read ground truth mask {gt_path}")
                continue
                
            gt_mask = (gt_mask > 0).astype(np.uint8)
            
            # Calculate DSC
            dsc = calculate_dsc(pred_mask, gt_mask)
            dsc_values.append(dsc)
            
            # Store results
            results[frame_num] = {
                'rgb_path': rgb_path,
                'pred_mask': pred_mask,
                'gt_mask': gt_mask,
                'dsc': dsc
            }
            
            print(f"Processed frame {frame_num}: DSC = {dsc:.4f}")
        
        except Exception as e:
            print(f"Error processing frame {frame_num}: {e}")
    
    if not results:
        print("No results to display. Check error messages above.")
        return
    
    # Calculate statistics
    mean_dsc = np.mean(dsc_values)
    std_dsc = np.std(dsc_values)
    print(f"Mean DSC: {mean_dsc:.4f} ± {std_dsc:.4f}")
    
    # Find best and worst frames
    frame_dsc_pairs = [(idx, results[idx]['dsc']) for idx in results.keys()]
    frame_dsc_pairs.sort(key=lambda x: x[1])
    
    # Get up to 5 worst frames (or as many as available)
    num_worst = min(5, len(frame_dsc_pairs))
    worst_frames = [pair[0] for pair in frame_dsc_pairs[:num_worst]]
    
    # Get up to 5 best frames (or as many as available)
    num_best = min(5, len(frame_dsc_pairs))
    best_frames = [pair[0] for pair in frame_dsc_pairs[-num_best:]]
    best_frames.reverse()  # Show highest DSC first
    
    print("Best frames:", best_frames)
    print("Worst frames:", worst_frames)
    
    # Create bar chart of DSC values
    plt.figure(figsize=(14, 8))
    image_indices = sorted(results.keys())
    dsc_values = [results[idx]['dsc'] for idx in image_indices]
    
    plt.bar(image_indices, dsc_values, color='skyblue', edgecolor='navy')
    plt.xlabel('Image Number (Index)', fontsize=12)
    plt.ylabel('Dice Similarity Coefficient (DSC)', fontsize=12)
    plt.title(f'Segmentation Performance\nMean DSC: {mean_dsc:.4f} ± {std_dsc:.4f}', fontsize=14)
    plt.ylim(0, 1)
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.tight_layout()
    plt.show()
    
    # Display appendix of best and worst results
    fig = plt.figure(figsize=(20, 24))
    plt.suptitle('Appendix: Five Best and Five Worst Results', fontsize=20)
    
    # Plot best results
    for i, frame_num in enumerate(best_frames):
        result = results[frame_num]
        rgb = cv2.imread(result['rgb_path'])
        rgb = cv2.cvtColor(rgb, cv2.COLOR_BGR2RGB)
        
        # Original image
        ax1 = plt.subplot(5, 4, i*2+1)
        ax1.imshow(rgb)
        ax1.set_title(f'Best #{i+1}: Frame {frame_num}', fontsize=12)
        ax1.axis('off')
        
        # Overlay
        ax2 = plt.subplot(5, 4, i*2+2)
        ax2.imshow(rgb)
        mask_rgb = np.zeros_like(rgb)
        mask_rgb[:,:,1] = result['pred_mask'] * 255  # Green channel
        ax2.imshow(mask_rgb, alpha=0.5)
        ax2.set_title(f'DSC: {result["dsc"]:.4f}', fontsize=12)
        ax2.axis('off')
    
    # Plot worst results
    for i, frame_num in enumerate(worst_frames):
        result = results[frame_num]
        rgb = cv2.imread(result['rgb_path'])
        rgb = cv2.cvtColor(rgb, cv2.COLOR_BGR2RGB)
        
        # Original image
        ax1 = plt.subplot(5, 4, (i+5)*2+1)
        ax1.imshow(rgb)
        ax1.set_title(f'Worst #{i+1}: Frame {frame_num}', fontsize=12)
        ax1.axis('off')
        
        # Overlay
        ax2 = plt.subplot(5, 4, (i+5)*2+2)
        ax2.imshow(rgb)
        mask_rgb = np.zeros_like(rgb)
        mask_rgb[:,:,1] = result['pred_mask'] * 255  # Green channel
        ax2.imshow(mask_rgb, alpha=0.5)
        ax2.set_title(f'DSC: {result["dsc"]:.4f}', fontsize=12)
        ax2.axis('off')
    
    plt.tight_layout(rect=[0, 0, 1, 0.97])
    plt.show()
    
    # Save visualizations
    save_visualizations(results, mean_dsc, std_dsc, best_frames, worst_frames)


# Main execution
if __name__ == "__main__":
    try:
        if rgb_images and mask_images:
            process_images_and_display_results()
        else:
            print("Cannot proceed - no images found.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        import traceback
        traceback.print_exc()
