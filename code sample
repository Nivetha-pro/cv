import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from glob import glob

# Define paths
data_path = "/path/to/unzipped/ball_frames"
rgb_images = sorted(glob(os.path.join(data_path, "RGB", "*.png")))
mask_images = sorted(glob(os.path.join(data_path, "Masks", "*.png")))

# Function to segment the ball using color thresholding
def segment_ball(image):
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    
    # Define color range for segmentation (tune based on dataset)
    lower_range = np.array([20, 100, 100])   # Lower bound of color
    upper_range = np.array([30, 255, 255])   # Upper bound of color

    # Create a binary mask
    mask = cv2.inRange(hsv, lower_range, upper_range)

    # Apply morphological operations to clean noise
    kernel = np.ones((5, 5), np.uint8)
    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)
    mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)
    
    return mask

# Function to compute Dice Similarity Score
def dice_score(seg, gt):
    seg = seg.astype(bool)
    gt = gt.astype(bool)
    intersection = np.logical_and(seg, gt).sum()
    return (2. * intersection) / (seg.sum() + gt.sum())

# Iterate over images, segment, and evaluate
dsc_scores = []
for rgb_path, mask_path in zip(rgb_images, mask_images):
    img = cv2.imread(rgb_path)
    gt_mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)
    
    # Convert ground-truth mask to binary
    gt_mask = (gt_mask > 127).astype(np.uint8) * 255
    
    # Perform segmentation
    segmented = segment_ball(img)
    
    # Compute Dice Similarity Score
    dsc = dice_score(segmented, gt_mask)
    dsc_scores.append(dsc)
    
    # Show a few examples
    if len(dsc_scores) % 10 == 0:  # Show every 10th image
        plt.figure(figsize=(10, 3))
        plt.subplot(1, 3, 1)
        plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
        plt.title("Original Image")
        
        plt.subplot(1, 3, 2)
        plt.imshow(gt_mask, cmap="gray")
        plt.title("Ground Truth")
        
        plt.subplot(1, 3, 3)
        plt.imshow(segmented, cmap="gray")
        plt.title(f"Segmented Mask (DSC={dsc:.2f})")
        plt.show()

# Compute mean and standard deviation of DSC scores
mean_dsc = np.mean(dsc_scores)
std_dsc = np.std(dsc_scores)

print(f"Mean DSC: {mean_dsc:.4f}, Standard Deviation: {std_dsc:.4f}")

# Plot Dice scores for all images
plt.figure(figsize=(10, 5))
plt.bar(range(len(dsc_scores)), dsc_scores)
plt.xlabel("Image Index")
plt.ylabel("Dice Similarity Score")
plt.title("DSC Scores for Each Image")
plt.show()

    
