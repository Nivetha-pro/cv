import cv2
import numpy as np
import os
import glob
import matplotlib.pyplot as plt
from skimage.measure import label, regionprops

# Define paths (ensure the path separators are consistent)
extracted_folder = r"C:\Users\Student\Desktop\New folder\ball_frames"  # Adjust this path to the folder where ZIP is extracted

# Function to perform automated ball segmentation
def ball_segmentation(image_path):
    img = cv2.imread(image_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    hsv = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)
    
    # Color ranges for different balls
    masks = [
        cv2.inRange(hsv, np.array([0, 100, 100]), np.array([10, 255, 255])),    # Red (low)
        cv2.inRange(hsv, np.array([160, 100, 100]), np.array([180, 255, 255])), # Red (high)
        cv2.inRange(hsv, np.array([100, 100, 100]), np.array([140, 255, 255])), # Blue
        cv2.inRange(hsv, np.array([40, 100, 100]), np.array([80, 255, 255])),   # Green
        cv2.inRange(hsv, np.array([20, 100, 100]), np.array([35, 255, 255])),   # Yellow
        cv2.inRange(hsv, np.array([10, 100, 100]), np.array([20, 255, 255])),   # Orange
        cv2.inRange(hsv, np.array([140, 50, 100]), np.array([170, 255, 255]))   # Pink/purple
    ]
    
    # Combine and clean mask
    combined_mask = np.zeros_like(masks[0])
    for mask in masks:
        combined_mask = combined_mask | mask
        
    kernel = np.ones((5, 5), np.uint8)
    mask_cleaned = cv2.morphologyEx(combined_mask, cv2.MORPH_OPEN, kernel)
    mask_cleaned = cv2.morphologyEx(mask_cleaned, cv2.MORPH_CLOSE, kernel)
    
    # Remove small regions based on area
    labeled_mask = label(mask_cleaned)
    clean_mask = np.zeros_like(mask_cleaned)
    for prop in regionprops(labeled_mask):
        if prop.area >= 200:  # Minimum size for the ball
            clean_mask[labeled_mask == prop.label] = 255
            
    return clean_mask, img

# Function to calculate Dice Similarity Score (DSC)
def calculate_dsc(pred_mask, gt_mask):
    pred_mask = pred_mask > 0
    gt_mask = gt_mask > 0
    
    intersection = np.logical_and(pred_mask, gt_mask).sum()
    union = pred_mask.sum() + gt_mask.sum()
    
    return (2.0 * intersection) / union if union > 0 else 1.0 if intersection == 0 else 0.0

def main():
    # Find all image files
    rgb_files = sorted(glob.glob(os.path.join(extracted_folder, "*[!_GT].png")))
    
    results = {}
    dsc_values = []
    frame_numbers = []  # To store the frame numbers for the x-axis
    
    # Process each image
    for rgb_path in rgb_files:
        base_name = os.path.basename(rgb_path).split('.')[0]
        frame_num = int(base_name.replace("frame-", ""))
        
        gt_path = os.path.join(extracted_folder, f"{base_name}_GT.png")
        if not os.path.exists(gt_path):
            print(f"No ground truth for frame {frame_num}")
            continue
            
        # Segment the ball and read ground truth mask
        pred_mask, original_img = ball_segmentation(rgb_path)
        gt_mask = cv2.imread(gt_path, cv2.IMREAD_GRAYSCALE)
        gt_mask_binary = (gt_mask > 0).astype(np.uint8) * 255
        
        # Calculate DSC for the frame
        dsc = calculate_dsc(pred_mask, gt_mask_binary)
        dsc_values.append(dsc)
        frame_numbers.append(frame_num)  # Collecting frame numbers
        results[frame_num] = {
            'original_img': original_img,
            'pred_mask': pred_mask,
            'gt_mask': gt_mask_binary,
            'dsc': dsc
        }
        print(f"Frame {frame_num}: DSC = {dsc:.4f}")
    
    # Calculate and display statistics (mean and standard deviation of DSC)
    mean_dsc = np.mean(dsc_values)
    std_dsc = np.std(dsc_values)
    print(f"Mean DSC: {mean_dsc:.4f} Â± {std_dsc:.4f}")
    
    # Get the best and worst frames based on DSC values
    frames_by_dsc = sorted(results.keys(), key=lambda k: results[k]['dsc'])
    worst_frames = frames_by_dsc[:5]  # 5 frames with worst DSC
    best_frames = frames_by_dsc[-5:]  # 5 frames with best DSC
    
    # Display the best images with title "5 Best Images"
    fig_best, axes_best = plt.subplots(5, 3, figsize=(15, 20))  # 5 rows for best images and 3 columns (Original, Predicted, GT)
    fig_best.suptitle("5 Best Images", fontsize=16)
    
    for i, frame_num in enumerate(best_frames):
        frame_data = results[frame_num]
        
        # Display original image with frame number in title
        axes_best[i, 0].imshow(frame_data['original_img'])
        axes_best[i, 0].set_title(f"Frame {frame_num} - Original")
        axes_best[i, 0].axis('off')
        
        # Display predicted mask (segmentation output) with DSC in title
        axes_best[i, 1].imshow(frame_data['pred_mask'], cmap='gray')
        axes_best[i, 1].set_title(f"Prediction (DSC: {frame_data['dsc']:.4f})")
        axes_best[i, 1].axis('off')
        
        # Display ground truth mask
        axes_best[i, 2].imshow(frame_data['gt_mask'], cmap='gray')
        axes_best[i, 2].set_title("Ground Truth")
        axes_best[i, 2].axis('off')
    
    plt.tight_layout()
    plt.show()

    # Display the worst images with title "5 Worst Images"
    fig_worst, axes_worst = plt.subplots(5, 3, figsize=(15, 20))  # 5 rows for worst images and 3 columns (Original, Predicted, GT)
    fig_worst.suptitle("5 Worst Images", fontsize=16)
    
    for i, frame_num in enumerate(worst_frames):
        frame_data = results[frame_num]
        
        # Display original image with frame number in title
        axes_worst[i, 0].imshow(frame_data['original_img'])
        axes_worst[i, 0].set_title(f"Frame {frame_num} - Original")
        axes_worst[i, 0].axis('off')
        
        # Display predicted mask (segmentation output) with DSC in title
        axes_worst[i, 1].imshow(frame_data['pred_mask'], cmap='gray')
        axes_worst[i, 1].set_title(f"Prediction (DSC: {frame_data['dsc']:.4f})")
        axes_worst[i, 1].axis('off')
        
        # Display ground truth mask
        axes_worst[i, 2].imshow(frame_data['gt_mask'], cmap='gray')
        axes_worst[i, 2].set_title("Ground Truth")
        axes_worst[i, 2].axis('off')
    
    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    main()
