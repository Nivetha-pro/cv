import os
import glob
import zipfile
import cv2
import numpy as np
import matplotlib.pyplot as plt

def extract_zip(data_path, extracted_folder):
    """
    Extract zip file to the specified folder
    
    Args:
    data_path (str): Path to the zip file
    extracted_folder (str): Destination folder for extraction
    """
    # Create extraction folder if it doesn't exist
    os.makedirs(extracted_folder, exist_ok=True)
    
    # Extract the zip file
    with zipfile.ZipFile(data_path, 'r') as zip_ref:
        zip_ref.extractall(extracted_folder)
    
    print(f"Extracted contents of {data_path} to {extracted_folder}")

def calculate_dsc(pred_mask, gt_mask):
    """
    Calculate Dice Similarity Coefficient (DSC)
    
    Args:
    pred_mask (numpy.ndarray): Predicted binary mask
    gt_mask (numpy.ndarray): Ground truth binary mask
    
    Returns:
    float: Dice Similarity Coefficient
    """
    # Ensure masks are binary
    pred_mask_binary = (pred_mask > 0).astype(np.uint8)
    gt_mask_binary = (gt_mask > 0).astype(np.uint8)
    
    # Calculate intersection and union
    intersection = np.sum(pred_mask_binary * gt_mask_binary)
    total_pixels = np.sum(pred_mask_binary) + np.sum(gt_mask_binary)
    
    # Calculate DSC
    if total_pixels == 0:
        return 0.0  # If both masks are empty, return 0
    
    dsc = (2.0 * intersection) / total_pixels
    return dsc

def ball_segmentation(rgb_path):
    """
    Perform ball segmentation on the input image
    
    Args:
    rgb_path (str): Path to the RGB image
    
    Returns:
    tuple: (predicted mask, original image, labeled mask)
    """
    try:
        # Read the original image
        original_img = cv2.imread(rgb_path)
        if original_img is None:
            raise ValueError(f"Could not read image: {rgb_path}")
        
        original_img_rgb = cv2.cvtColor(original_img, cv2.COLOR_BGR2RGB)
        
        # Convert to HSV color space
        hsv_img = cv2.cvtColor(original_img, cv2.COLOR_BGR2HSV)
        
        # Define color range for ball segmentation (adjust these values as needed)
        lower_color = np.array([0, 100, 100])   # Lower HSV bounds
        upper_color = np.array([20, 255, 255])  # Upper HSV bounds
        
        # Create a binary mask
        color_mask = cv2.inRange(hsv_img, lower_color, upper_color)
        
        # Optional: Apply morphological operations to clean up the mask
        kernel = np.ones((5,5), np.uint8)
        pred_mask = cv2.morphologyEx(color_mask, cv2.MORPH_CLOSE, kernel)
        pred_mask = cv2.morphologyEx(pred_mask, cv2.MORPH_OPEN, kernel)
        
        # Find connected components for labeling
        num_labels, labeled_mask = cv2.connectedComponents(pred_mask)
        
        return pred_mask, original_img_rgb, labeled_mask
    
    except Exception as e:
        print(f"Error in ball_segmentation for {rgb_path}: {e}")
        return None, None, None

def main(extracted_folder):
    # Find all image files
    rgb_files = sorted(glob.glob(os.path.join(extracted_folder, "*[!_GT].png")))
    
    if not rgb_files:
        print(f"No RGB images found in {extracted_folder}")
        return
    
    results = {}
    dsc_values = []
    frame_numbers = []  # To store the frame numbers for the x-axis
    
    # Process each image
    for rgb_path in rgb_files:
        base_name = os.path.basename(rgb_path).split('.')[0]
        
        try:
            frame_num = int(base_name.replace("frame-", ""))
        except ValueError:
            print(f"Skipping file with invalid name: {base_name}")
            continue
        
        gt_path = os.path.join(extracted_folder, f"{base_name}_GT.png")
        if not os.path.exists(gt_path):
            print(f"No ground truth for frame {frame_num}")
            continue
            
        # Segment the ball and read ground truth mask
        pred_mask, original_img, labeled_mask = ball_segmentation(rgb_path)
        
        if pred_mask is None or original_img is None:
            print(f"Segmentation failed for frame {frame_num}")
            continue
        
        gt_mask = cv2.imread(gt_path, cv2.IMREAD_GRAYSCALE)
        if gt_mask is None:
            print(f"Could not read ground truth mask for frame {frame_num}")
            continue
        
        gt_mask_binary = (gt_mask > 0).astype(np.uint8) * 255
        
        # Calculate DSC for the frame
        dsc = calculate_dsc(pred_mask, gt_mask_binary)
        dsc_values.append(dsc)
        frame_numbers.append(frame_num)  # Collecting frame numbers
        results[frame_num] = {
            'original_img': original_img,
            'pred_mask': pred_mask,
            'gt_mask': gt_mask_binary,
            'dsc': dsc
        }
        print(f"Frame {frame_num}: DSC = {dsc:.4f}")
    
    # Check if we have any valid results
    if not dsc_values:
        print("No valid DSC values computed. Check your input images and segmentation.")
        return
    
    # Calculate and display mean and standard deviation of DSC
    mean_dsc = np.mean(dsc_values)
    std_dsc = np.std(dsc_values)
    print(f"Mean DSC: {mean_dsc:.4f}")
    print(f"Standard Deviation of DSC: {std_dsc:.4f}")
    
    # Display results only if we have enough frames
    if len(results) >= 10:
        # Display the best and worst results
        frames_by_dsc = sorted(results.keys(), key=lambda k: results[k]['dsc'])
        worst_frames = frames_by_dsc[:5]  # 5 frames with worst DSC
        best_frames = frames_by_dsc[-5:]  # 5 frames with best DSC
        
        # Show the best images with title "5 Best Images"
        fig_best, axes_best = plt.subplots(5, 3, figsize=(15, 20))  # 5 rows for best images and 3 columns (Original, Predicted, GT)
        fig_best.suptitle("5 Best Images", fontsize=16)
        
        for i, frame_num in enumerate(best_frames):
            frame_data = results[frame_num]
            
            # Display original image with frame number in title
            axes_best[i, 0].imshow(frame_data['original_img'])
            axes_best[i, 0].set_title(f"Frame {frame_num} - Original")
            axes_best[i, 0].axis('off')
            
            # Display predicted mask (segmentation output) with DSC in title
            axes_best[i, 1].imshow(frame_data['pred_mask'], cmap='gray')
            axes_best[i, 1].set_title(f"Prediction (DSC: {frame_data['dsc']:.4f})")
            axes_best[i, 1].axis('off')
            
            # Display the ground truth mask with frame number
            axes_best[i, 2].imshow(frame_data['gt_mask'], cmap='gray')
            axes_best[i, 2].set_title("Ground Truth")
            axes_best[i, 2].axis('off')

        # Display the worst images with title "5 Worst Images"
        fig_worst, axes_worst = plt.subplots(5, 3, figsize=(15, 20))  # 5 rows for worst images and 3 columns (Original, Predicted, GT)
        fig_worst.suptitle("5 Worst Images", fontsize=16)

        for i, frame_num in enumerate(worst_frames):
            frame_data = results[frame_num]
            
            # Display original image with frame number in title
            axes_worst[i, 0].imshow(frame_data['original_img'])
            axes_worst[i, 0].set_title(f"Frame {frame_num} - Original")
            axes_worst[i, 0].axis('off')
            
            # Display predicted mask (segmentation output) with DSC in title
            axes_worst[i, 1].imshow(frame_data['pred_mask'], cmap='gray')
            axes_worst[i, 1].set_title(f"Prediction (DSC: {frame_data['dsc']:.4f})")
            axes_worst[i, 1].axis('off')
            
            # Display the ground truth mask with frame number
            axes_worst[i, 2].imshow(frame_data['gt_mask'], cmap='gray')
            axes_worst[i, 2].set_title("Ground Truth")
            axes_worst[i, 2].axis('off')

        # Display bar chart of DSC values
        plt.figure(figsize=(10, 6))
        plt.bar(frame_numbers, dsc_values, color='skyblue')
        plt.xlabel('Image Number (Index)', fontsize=12)
        plt.ylabel('Dice Similarity Coefficient (DSC)', fontsize=12)
        plt.title('DSC Values for Each Image', fontsize=16)
        plt.tight_layout()
        plt.show()
    else:
        print(f"Not enough frames to plot (found {len(results)} frames)")

# Example usage
if __name__ == "__main__":
    # Define paths (ensure the path separators are consistent)
    data_path = r"C:\Users\Student\Desktop\New folder\ball_frames.zip"
    extracted_folder = r"C:\Users\Student\Desktop\New folder\ball_frames"
    
    # Extract zip file
    extract_zip(data_path, extracted_folder)
    
    # Run main analysis
    main(extracted_folder)
