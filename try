clc; clear; close all;

% Set paths for images and ground-truth masks
image_folder = 'ball_frames/RGB';
mask_folder = 'ball_frames/Masks';
image_files = dir(fullfile(image_folder, '*.png'));
mask_files = dir(fullfile(mask_folder, '*.png'));......../

num_images = length(image_files);
dsc_values = zeros(num_images, 1);

for i = 1:num_images
    % Read RGB image and corresponding mask
    img = imread(fullfile(image_folder, image_files(i).name));
    gt_mask = imread(fullfile(mask_folder, mask_files(i).name));
    
    % Convert to grayscale and apply thresholding
    gray_img = rgb2gray(img);
    bin_mask = imbinarize(gray_img, 'adaptive');
    
    % Morphological operations to remove noise
    bin_mask = imopen(bin_mask, strel('disk', 5));
    bin_mask = imclose(bin_mask, strel('disk', 5));
    
    % Compute Dice Similarity Score (DSC)
    gt_mask = imbinarize(gt_mask); % Ensure ground-truth is binary
    intersection = sum(bin_mask(:) & gt_mask(:));
    dsc = (2 * intersection) / (sum(bin_mask(:)) + sum(gt_mask(:)));
    dsc_values(i) = dsc;
    
    % Save segmentation results (optional)
    segmented_img = uint8(bin_mask) * 255;
    imwrite(segmented_img, fullfile('results', image_files(i).name));
end

% Calculate mean and standard deviation of DSC
mean_dsc = mean(dsc_values);
std_dsc = std(dsc_values);

% Plot DSC values
figure;
bar(dsc_values);
xlabel('Image Index');
ylabel('Dice Similarity Score');
title('Segmentation Performance');
saveas(gcf, 'dsc_bar_chart.png');

% Display results
fprintf('Mean DSC: %.4f\n', mean_dsc);
fprintf('Standard Deviation of DSC: %.4f\n', std_dsc);
