import cv2
import numpy as np
import os
import matplotlib.pyplot as plt
from sklearn.metrics import jaccard_score

# Load images and masks
def load_images_and_masks(folder):
    images, masks = [], []
    for filename in sorted(os.listdir(folder)):
        if "_mask" in filename:
            masks.append(cv2.imread(os.path.join(folder, filename), cv2.IMREAD_GRAYSCALE))
        else:
            images.append(cv2.imread(os.path.join(folder, filename)))
    return images, masks

# Image segmentation using color thresholding and morphological operations
def segment_ball(image):
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    lower_red = np.array([0, 100, 100])
    upper_red = np.array([10, 255, 255])
    mask = cv2.inRange(hsv, lower_red, upper_red)
    kernel = np.ones((5, 5), np.uint8)
    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)
    return mask

# Compute Dice Similarity Score
def dice_score(pred, gt):
    pred = pred.flatten() > 0
    gt = gt.flatten() > 0
    return 2 * np.sum(pred & gt) / (np.sum(pred) + np.sum(gt))

# Main processing
folder = "ball_frames/"
images, ground_truths = load_images_and_masks(folder)
dice_scores = []
segmented_masks = []

for i in range(len(images)):
    seg_mask = segment_ball(images[i])
    segmented_masks.append(seg_mask)
    dsc = dice_score(seg_mask, ground_truths[i])
    dice_scores.append(dsc)

# Plot results
plt.figure(figsize=(10, 5))
plt.bar(range(len(dice_scores)), dice_scores)
plt.xlabel("Image Index")
plt.ylabel("Dice Score")
plt.title("Dice Similarity Score for Each Image")
plt.show()

# Save best and worst results
sorted_indices = np.argsort(dice_scores)
print("Best Results:")
for i in sorted_indices[-5:]:
    cv2.imshow(f"Best {i}", segmented_masks[i])
    cv2.imshow(f"Ground Truth {i}", ground_truths[i])
    cv2.waitKey(0)

print("Worst Results:")
for i in sorted_indices[:5]:
    cv2.imshow(f"Worst {i}", segmented_masks[i])
    cv2.imshow(f"Ground Truth {i}", ground_truths[i])
    cv2.waitKey(0)

cv2.destroyAllWindows()
