import os
import re
import numpy as np
import pandas as pd
from skimage import io, measure, color
from skimage.feature import graycomatrix, graycoprops
from skimage.util import img_as_ubyte
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix

# ---------------- SHAPE FEATURE EXTRACTION ----------------
def extract_shape_features(indexed_img, frame_num, ball_type, ball_name):
    features = []
    props = measure.regionprops(indexed_img)
    for region in props:
        area = region.area
        perimeter = region.perimeter if region.perimeter != 0 else 1
        circularity = 4 * np.pi * area / (perimeter ** 2)
        non_compactness = perimeter ** 2 / (4 * np.pi * area)
        features.append({
            'frame': frame_num,
            'ball_type': ball_type,
            'ball_name': ball_name,
            'solidity': region.solidity,
            'circularity': circularity,
            'non_compactness': non_compactness,
            'eccentricity': region.eccentricity
        })
    return features

# ---------------- TEXTURE FEATURE EXTRACTION ----------------
def extract_texture_features(rgb_img, frame_num, ball_type, ball_name):
    distances = [1]
    angles = [0, np.pi/4, np.pi/2, 3*np.pi/4]
    props = ['ASM', 'contrast', 'correlation']
    glcm_data = []

    for i, channel_name in enumerate(['R', 'G', 'B']):
        channel = img_as_ubyte(rgb_img[:, :, i])
        glcm = graycomatrix(channel, distances=distances, angles=angles, symmetric=True, normed=True)
        feature_values = {}
        for prop in props:
            values = graycoprops(glcm, prop)
            feature_values[f'{prop.lower()}_avg'] = np.mean(values)
            feature_values[f'{prop.lower()}_range'] = np.ptp(values)
        glcm_data.append({
            'frame': frame_num,
            'ball_type': ball_type,
            'ball_name': ball_name,
            'channel': channel_name,
            **feature_values
        })
    return glcm_data

# ---------------- IMAGE PROCESSING ----------------
def process_images(folder):
    shape_data = []
    glcm_data = []

    for file in os.listdir(folder):
        if file.endswith('_indexed.png'):
            frame_num = int(re.findall(r'frame-(\d+)', file)[0])
            base_name = file.replace('_indexed.png', '')
            indexed_path = os.path.join(folder, file)
            rgb_path = os.path.join(folder, base_name + '_rgb.png')

            indexed_img = io.imread(indexed_path)
            rgb_img = io.imread(rgb_path)

            # Assuming ball type and ball name are based on filename or some metadata logic.
            if 'football' in base_name:
                ball_type = 1
                ball_name = 'Football'
            elif 'basketball' in base_name:
                ball_type = 2
                ball_name = 'Basketball'
            else:
                ball_type = 3
                ball_name = 'Tennis'  # Or any other default type/ball name

            shape_data.extend(extract_shape_features(indexed_img, frame_num, ball_type, ball_name))
            glcm_data.extend(extract_texture_features(rgb_img, frame_num, ball_type, ball_name))

    df_shape = pd.DataFrame(shape_data)
    df_glcm = pd.DataFrame(glcm_data)
    return df_shape, df_glcm

# ---------------- PLOTTING SHAPE FEATURES ----------------
def plot_shape_features(df_shape):
    shape_features = ['solidity', 'circularity', 'non_compactness', 'eccentricity']
    fig, axes = plt.subplots(2, 2, figsize=(14, 12))
    axes = axes.flatten()

    for i, feature in enumerate(shape_features):
        sns.boxplot(x='ball_name', y=feature, data=df_shape, ax=axes[i], palette='Set2')
        sns.stripplot(x='ball_name', y=feature, data=df_shape, ax=axes[i],
                      size=4, color='black', alpha=0.3)
        axes[i].set_title(f'{feature.capitalize()} by Ball Type')
        axes[i].set_xlabel('Ball Type')
        axes[i].set_ylabel(feature.capitalize())
        axes[i].grid(True, alpha=0.3)

    plt.tight_layout()
    plt.savefig("shape_feature_distributions.png")
    plt.show()

# ---------------- PLOTTING GLCM FEATURES ----------------
def plot_glcm_features(df_glcm):
    texture_features = ['asm_avg', 'contrast_avg', 'correlation_avg']
    range_features = ['asm_range', 'contrast_range', 'correlation_range']

    for feature in texture_features:
        fig, axes = plt.subplots(1, 3, figsize=(18, 6))
        for i, channel in enumerate(['R', 'G', 'B']):
            channel_data = df_glcm[df_glcm['channel'] == channel]
            sns.boxplot(x='ball_name', y=feature, data=channel_data, ax=axes[i], palette='Set2')
            sns.stripplot(x='ball_name', y=feature, data=channel_data, ax=axes[i],
                          size=4, color='black', alpha=0.3)
            axes[i].set_title(f'{feature} - {channel} Channel')
            axes[i].set_xlabel('Ball Type')
            axes[i].set_ylabel(feature)
            axes[i].grid(True, alpha=0.3)
        plt.tight_layout()
        plt.savefig(f'glcm_{feature}_distribution.png')
        plt.show()

    for feature in range_features:
        fig, axes = plt.subplots(1, 3, figsize=(18, 6))
        for i, channel in enumerate(['R', 'G', 'B']):
            channel_data = df_glcm[df_glcm['channel'] == channel]
            sns.boxplot(x='ball_name', y=feature, data=channel_data, ax=axes[i], palette='Set2')
            sns.stripplot(x='ball_name', y=feature, data=channel_data, ax=axes[i],
                          size=4, color='black', alpha=0.3)
            axes[i].set_title(f'{feature} - {channel} Channel')
            axes[i].set_xlabel('Ball Type')
            axes[i].set_ylabel(feature)
            axes[i].grid(True, alpha=0.3)
        plt.tight_layout()
        plt.savefig(f'glcm_{feature}_distribution.png')
        plt.show()

# ---------------- CLASSIFICATION ----------------
def classify_ball_types(df_shape, df_glcm):
    # Step 1: Aggregate shape features per ball per frame
    agg_shape = df_shape.groupby(['frame', 'ball_type', 'ball_name']).mean(numeric_only=True).reset_index()

    # Step 2: Aggregate GLCM features per ball per frame
    agg_glcm = df_glcm.groupby(['frame', 'ball_type', 'ball_name']).mean(numeric_only=True).reset_index()

    # Step 3: Merge both on frame, ball_type, and ball_name
    df_merged = pd.merge(agg_shape, agg_glcm, on=['frame', 'ball_type', 'ball_name'], how='inner')

    # Step 4: Define final feature list from actual columns
    features = ['solidity', 'circularity', 'non_compactness', 'eccentricity',
                'asm_avg', 'contrast_avg', 'correlation_avg',
                'asm_range', 'contrast_range', 'correlation_range']

    # Verify features exist in df_merged
    missing_features = [f for f in features if f not in df_merged.columns]
    if missing_features:
        raise ValueError(f"Missing features in merged DataFrame: {missing_features}")

    # Step 5: Prepare X, y
    X = df_merged[features]
    y = df_merged['ball_type']

    # Step 6: Standardize
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    # Step 7: Train-test split & classification
    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)
    clf = RandomForestClassifier(random_state=42)
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)

    # Step 8: Report
    labels_present = sorted(np.unique(y_test))
    target_names_present = ['Football', 'Basketball', 'Tennis']  # Set ball names explicitly

    print("Classification Report:")
    print(classification_report(y_test, y_pred, labels=labels_present, target_names=target_names_present))
    print("Confusion Matrix:")
    print(confusion_matrix(y_test, y_pred))

# ---------------- MAIN ----------------
if __name__ == "__main__":
    folder_path = r"C:\Users\Student\Desktop\New folder\ball_frames\ball_frames"
    df_shape, df_glcm = process_images(folder_path)

    df_shape.to_csv("shape_features.csv", index=False)
    df_glcm.to_csv("glcm_features.csv", index=False)

    print("Shape Features:")
    print(df_shape.head())

    print("Texture Features:")
    print(df_glcm.head())

    plot_shape_features(df_shape)
    plot_glcm_features(df_glcm)

    # Perform classification
    classify_ball_types(df_shape, df_glcm)
