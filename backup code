import os
import glob
import cv2
import numpy as np
import matplotlib.pyplot as plt

def calculate_dsc(pred_mask, gt_mask):
    # Compute the Dice Similarity Coefficient (DSC)
    intersection = np.sum(pred_mask & gt_mask)
    union = np.sum(pred_mask) + np.sum(gt_mask)
    return 2 * intersection / union if union != 0 else 1.0

def enhanced_ball_segmentation(rgb_path):
    try:
        # Read the original image
        original_img = cv2.imread(rgb_path)
        if original_img is None:
            raise ValueError(f"Could not read image: {rgb_path}")
        
        original_img_rgb = cv2.cvtColor(original_img, cv2.COLOR_BGR2RGB)
        
        # Convert to HSV color space
        hsv_img = cv2.cvtColor(original_img, cv2.COLOR_BGR2HSV)
        
        # Apply CLAHE for better contrast
        lab_img = cv2.cvtColor(original_img, cv2.COLOR_BGR2Lab)
        l, a, b = cv2.split(lab_img)
        clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
        cl = clahe.apply(l)
        lab_img = cv2.merge((cl, a, b))
        enhanced_img = cv2.cvtColor(lab_img, cv2.COLOR_Lab2BGR)

        # Use a more specific color range (could be tweaked based on experiment)
        lower_color = np.array([0, 100, 100])   # Lower HSV bounds
        upper_color = np.array([20, 255, 255])  # Upper HSV bounds
        
        # Create a binary mask
        color_mask = cv2.inRange(hsv_img, lower_color, upper_color)
        
        # Morphological operations to remove noise and smooth the mask
        kernel = np.ones((7, 7), np.uint8)
        pred_mask = cv2.morphologyEx(color_mask, cv2.MORPH_CLOSE, kernel)
        pred_mask = cv2.morphologyEx(pred_mask, cv2.MORPH_OPEN, kernel)
        
        # Find contours to refine the mask
        contours, _ = cv2.findContours(pred_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        # Filter contours based on area (assuming the ball is a larger object)
        pred_mask_refined = np.zeros_like(pred_mask)
        for contour in contours:
            if cv2.contourArea(contour) > 500:  # Threshold area based on ball size
                cv2.drawContours(pred_mask_refined, [contour], -1, (255), thickness=cv2.FILLED)
        
        # Optional: Use circular Hough Transform to detect the ball shape
        circles = cv2.HoughCircles(pred_mask_refined, cv2.HOUGH_GRADIENT, dp=1.2, minDist=50, param1=100, param2=30, minRadius=10, maxRadius=50)
        if circles is not None:
            circles = np.uint16(np.around(circles))
            for circle in circles[0, :]:
                # Draw circle in the mask (optional)
                cv2.circle(pred_mask_refined, (circle[0], circle[1]), circle[2], (255), 2)
        
        # Find connected components and label the mask
        num_labels, labeled_mask = cv2.connectedComponents(pred_mask_refined)
        
        return pred_mask_refined, original_img_rgb, labeled_mask
    
    except Exception as e:
        print(f"Error in enhanced_ball_segmentation for {rgb_path}: {e}")
        return None, None, None

def main(extracted_folder):
    # Find all image files
    rgb_files = sorted(glob.glob(os.path.join(extracted_folder, "*[!_GT].png")))
    
    if not rgb_files:
        print(f"No RGB images found in {extracted_folder}")
        return
    
    results = {}
    dsc_values = []
    frame_numbers = []  # To store the frame numbers for the x-axis
    
    # Process each image
    for rgb_path in rgb_files:
        base_name = os.path.basename(rgb_path).split('.')[0]
        
        try:
            frame_num = int(base_name.replace("frame-", ""))
        except ValueError:
            print(f"Skipping file with invalid name: {base_name}")
            continue
        
        gt_path = os.path.join(extracted_folder, f"{base_name}_GT.png")
        if not os.path.exists(gt_path):
            print(f"No ground truth for frame {frame_num}")
            continue
            
        # Segment the ball and read ground truth mask
        pred_mask, original_img, labeled_mask = enhanced_ball_segmentation(rgb_path)
        
        if pred_mask is None or original_img is None:
            print(f"Segmentation failed for frame {frame_num}")
            continue
        
        gt_mask = cv2.imread(gt_path, cv2.IMREAD_GRAYSCALE)
        if gt_mask is None:
            print(f"Could not read ground truth mask for frame {frame_num}")
            continue
        
        gt_mask_binary = (gt_mask > 0).astype(np.uint8) * 255
        
        # Calculate DSC for the frame
        dsc = calculate_dsc(pred_mask, gt_mask_binary)
        dsc_values.append(dsc)
        frame_numbers.append(frame_num)  # Collecting frame numbers
        results[frame_num] = {
            'original_img': original_img,
            'pred_mask': pred_mask,
            'gt_mask': gt_mask_binary,
            'dsc': dsc
        }
        print(f"Frame {frame_num}: DSC = {dsc:.4f}")
    
    # Check if we have any valid results
    if not dsc_values:
        print("No valid DSC values computed. Check your input images and segmentation.")
        return
    
    # Calculate and display mean and standard deviation of DSC
    mean_dsc = np.mean(dsc_values)
    std_dsc = np.std(dsc_values)
    print(f"Mean DSC: {mean_dsc:.4f}")
    print(f"Standard Deviation of DSC: {std_dsc:.4f}")
    
    # Display results only if we have enough frames
    if len(results) >= 10:
        # Display the best and worst results
        frames_by_dsc = sorted(results.keys(), key=lambda k: results[k]['dsc'])
        worst_frames = frames_by_dsc[:5]  # 5 frames with worst DSC
        best_frames = frames_by_dsc[-5:]  # 5 frames with best DSC
        
        # Show the best images with title "5 Best Images"
        fig_best, axes_best = plt.subplots(5, 3, figsize=(15, 20))  # 5 rows for best images and 3 columns (Original, Predicted, GT)
        fig_best.suptitle("5 Best Images", fontsize=16)
        
        for i, frame_num in enumerate(best_frames):
            frame_data = results[frame_num]
            
            # Display original image with frame number in title
            axes_best[i, 0].imshow(frame_data['original_img'])
            axes_best[i, 0].set_title(f"Frame {frame_num} - Original")
            axes_best[i, 0].axis('off')
            
            # Display predicted mask (segmentation output) with DSC in title
            axes_best[i, 1].imshow(frame_data['pred_mask'], cmap='gray')
            axes_best[i, 1].set_title(f"Prediction (DSC: {frame_data['dsc']:.4f})")
            axes_best[i, 1].axis('off')
            
            # Display the ground truth mask with frame number
            axes_best[i, 2].imshow(frame_data['gt_mask'], cmap='gray')
            axes_best[i, 2].set_title("Ground Truth")
            axes_best[i, 2].axis('off')

        # Display the worst images with title "5 Worst Images"
        fig_worst, axes_worst = plt.subplots(5, 3, figsize=(15, 20))  # 5 rows for worst images and 3 columns (Original, Predicted, GT)
        fig_worst.suptitle("5 Worst Images", fontsize=16)

        for i, frame_num in enumerate(worst_frames):
            frame_data = results[frame_num]
            
            # Display original image with frame number in title
            axes_worst[i, 0].imshow(frame_data['original_img'])
            axes_worst[i, 0].set_title(f"Frame {frame_num} - Original")
            axes_worst[i, 0].axis('off')
            
            # Display predicted mask (segmentation output) with DSC in title
            axes_worst[i, 1].imshow(frame_data['pred_mask'], cmap='gray')
            axes_worst[i, 1].set_title(f"Prediction (DSC: {frame_data['dsc']:.4f})")
            axes_worst[i, 1].axis('off')
            
            # Display the ground truth mask with frame number
            axes_worst[i, 2].imshow(frame_data['gt_mask'], cmap='gray')
            axes_worst[i, 2].set_title("Ground Truth")
            axes_worst[i, 2].axis('off')

        # Display bar chart of DSC values
        plt.figure(figsize=(10, 6))
        plt.bar(frame_numbers, dsc_values, color='skyblue')
        plt.xlabel('Image Number (Index)', fontsize=12)
        plt.ylabel('Dice Similarity Coefficient (DSC)', fontsize=12)
        plt.title('DSC Values for Each Image', fontsize=16)
        plt.tight_layout()
        plt.show()
    else:
        print(f"Not enough frames to plot (found {len(results)} frames)")

# Call the main function with the path to your extracted folder
main("C:/Users/Student/Desktop/New folder/ball_frames")
