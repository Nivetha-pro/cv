import cv2
import numpy as np
import os
import glob
import matplotlib.pyplot as plt
from skimage.measure import label, regionprops

def load_images(data_dir):
    """Load image file paths, ensuring safe handling of GT images."""
    rgb_files = sorted(glob.glob(os.path.join(data_dir, "frame-*.png")))
    gt_files = sorted(glob.glob(os.path.join(data_dir, "frame-*_GT.png")))

    # Filter out only RGB images (remove GT images from list)
    rgb_files = [img for img in rgb_files if '_GT' not in img]
    return rgb_files, gt_files

def ball_segmentation(image_path):
    """Segment colored balls in an image using color-based thresholding."""
    img = cv2.imread(image_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    hsv = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)
    
    # Define HSV ranges for different ball colors
    masks = [
        cv2.inRange(hsv, np.array([0, 100, 100]), np.array([10, 255, 255])),    # Red (low)
        cv2.inRange(hsv, np.array([160, 100, 100]), np.array([180, 255, 255])), # Red (high)
        cv2.inRange(hsv, np.array([100, 100, 100]), np.array([140, 255, 255])), # Blue
        cv2.inRange(hsv, np.array([40, 100, 100]), np.array([80, 255, 255])),   # Green
        cv2.inRange(hsv, np.array([20, 100, 100]), np.array([35, 255, 255])),   # Yellow
        cv2.inRange(hsv, np.array([10, 100, 100]), np.array([20, 255, 255])),   # Orange
        cv2.inRange(hsv, np.array([140, 50, 100]), np.array([170, 255, 255]))   # Pink/purple
    ]
    
    # Combine all color masks
    combined_mask = np.zeros_like(masks[0])
    for mask in masks:
        combined_mask = combined_mask | mask
        
    # Morphological operations to refine mask
    kernel = np.ones((5, 5), np.uint8)
    mask_cleaned = cv2.morphologyEx(combined_mask, cv2.MORPH_OPEN, kernel)
    mask_cleaned = cv2.morphologyEx(mask_cleaned, cv2.MORPH_CLOSE, kernel)
    
    # Remove small regions
    labeled_mask = label(mask_cleaned)
    clean_mask = np.zeros_like(mask_cleaned)
    for prop in regionprops(labeled_mask):
        if prop.area >= 200:  # Minimum ball size
            clean_mask[labeled_mask == prop.label] = 255
            
    return clean_mask, img  # Return mask & original image

def calculate_dsc(pred_mask, gt_mask):
    """Compute Dice Similarity Coefficient (DSC)."""
    pred_mask = pred_mask > 0
    gt_mask = gt_mask > 0
    
    intersection = np.logical_and(pred_mask, gt_mask).sum()
    union = pred_mask.sum() + gt_mask.sum()
    
    return (2.0 * intersection) / union if union > 0 else 1.0 if intersection == 0 else 0.0

def create_overlay(original, mask, color_channel=1):
    """Overlay mask on original image (Green for prediction, Red for GT)."""
    overlay = original.copy()
    mask_rgb = np.zeros_like(original)
    mask_rgb[:,:,color_channel] = mask * 255
    return cv2.addWeighted(overlay, 0.7, mask_rgb, 0.3, 0)

def main():
    # Setup dataset path
    data_dir = "ball_frames"
    rgb_files, _ = load_images(data_dir)

    results = {}
    dsc_values = []
    
    # Process images
    for rgb_path in rgb_files:
        base_name = os.path.basename(rgb_path).split('.')[0]
        frame_num = int(base_name.replace("frame-", ""))
        
        # Find corresponding ground truth
        gt_path = os.path.join(data_dir, f"{base_name}_GT.png")
        if not os.path.exists(gt_path):
            print(f" No ground truth for frame {frame_num}")
            continue
            
        # Perform segmentation and load GT mask
        pred_mask, original_img = ball_segmentation(rgb_path)
        gt_mask = cv2.imread(gt_path, cv2.IMREAD_GRAYSCALE)
        dsc = calculate_dsc(pred_mask, gt_mask)
        
        dsc_values.append(dsc)
        results[frame_num] = {
            'rgb_path': rgb_path,
            'original_img': original_img,
            'pred_mask': pred_mask,
            'gt_mask': gt_mask,
            'dsc': dsc
        }
        print(f" Frame {frame_num}: DSC = {dsc:.4f}")
    
    # Compute DSC statistics
    mean_dsc = np.mean(dsc_values)
    std_dsc = np.std(dsc_values)
    print(f"\nðŸ“Š Mean DSC: {mean_dsc:.4f} Â± {std_dsc:.4f}\n")
    
    # Create results directory
    os.makedirs("results", exist_ok=True)
    
    # Get best and worst cases
    frames_by_dsc = sorted(results.keys(), key=lambda k: results[k]['dsc'])
    worst_frames = frames_by_dsc[:5]
    best_frames = frames_by_dsc[-5:]

    print(f" Best Frames: {best_frames}")
    print(f" Worst Frames: {worst_frames}")

    # Visualization
    fig, axes = plt.subplots(3, 1, figsize=(15, 10))
    
    # DSC bar chart
    axes[0].bar(sorted(results.keys()), [results[k]['dsc'] for k in sorted(results.keys())], color='skyblue')
    axes[0].set_xlabel('Image Index')
    axes[0].set_ylabel('DSC')
    axes[0].set_title(f'Segmentation Results (Mean DSC: {mean_dsc:.4f} Â± {std_dsc:.4f})')
    axes[0].set_ylim(0, 1)
    axes[0].grid(axis='y', alpha=0.7)

    # Function to plot best & worst cases
    def plot_examples(frames, title, row):
        for i, frame_num in enumerate(frames):
            frame_data = results[frame_num]

            # Original image
            axes[row, i].imshow(frame_data['original_img'])
            axes[row, i].set_title(f"Frame {frame_num}\nDSC: {frame_data['dsc']:.4f}")
            axes[row, i].axis('off')

            # Prediction overlay
            pred_overlay = create_overlay(frame_data['original_img'], frame_data['pred_mask'], color_channel=1)
            axes[row+1, i].imshow(pred_overlay)
            axes[row+1, i].set_title("Prediction Overlay")
            axes[row+1, i].axis('off')

    # Best and worst frame plots
    plot_examples(best_frames, "Best Cases", 1)
    plot_examples(worst_frames, "Worst Cases", 2)

    plt.tight_layout()
    plt.savefig('results/comprehensive_results.png', dpi=300, bbox_inches='tight')
    plt.show()

if __name__ == "__main__":
    main()
