import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Use a clean plot style
plt.style.use("seaborn-v0_8-darkgrid")

# === 1. Load data ===
file_path_x = "C:/Users/Student/Desktop/New folder/coordinates/x.csv"
file_path_y = "C:/Users/Student/Desktop/New folder/coordinates/y.csv"
file_path_na = "C:/Users/Student/Desktop/New folder/coordinates/na.csv"
file_path_nb = "C:/Users/Student/Desktop/New folder/coordinates/nb.csv"

x_true = pd.read_csv(file_path_x, header=None).values.flatten()
y_true = pd.read_csv(file_path_y, header=None).values.flatten()
na = pd.read_csv(file_path_na, header=None).values.flatten()
nb = pd.read_csv(file_path_nb, header=None).values.flatten()

print(f"Data lengths: x={len(x_true)}, y={len(y_true)}, na={len(na)}, nb={len(nb)}")

# === 2. Kalman Filter Setup ===
dt = 0.5
F = np.array([[1, 0, dt, 0],
              [0, 1, 0, dt],
              [0, 0, 1, 0],
              [0, 0, 0, 1]])

H = np.array([[1, 0, 0, 0],
              [0, 1, 0, 0]])

Q = np.array([[0.1, 0, 0, 0],
              [0, 0.1, 0, 0],
              [0, 0, 1, 0],
              [0, 0, 0, 1]])

R = np.array([[10, 0],
              [0, 10]])

x_hat = np.array([na[0], nb[0], 0, 0])
P = np.eye(4) * 100

x_predicted, y_predicted = [], []

# === 3. Kalman Filter Execution ===
for i in range(len(na)):
    z = np.array([na[i], nb[i]])
    x_hat_minus = F @ x_hat
    P_minus = F @ P @ F.T + Q
    K = P_minus @ H.T @ np.linalg.inv(H @ P_minus @ H.T + R)
    x_hat = x_hat_minus + K @ (z - H @ x_hat_minus)
    P = (np.eye(4) - K @ H) @ P_minus

    x_predicted.append(x_hat[0])
    y_predicted.append(x_hat[1])

x_predicted = np.array(x_predicted)
y_predicted = np.array(y_predicted)

# === 4. RMSE Calculation ===
rmse_noisy_x = np.sqrt(np.mean((na - x_true) ** 2))
rmse_noisy_y = np.sqrt(np.mean((nb - y_true) ** 2))
rmse_noisy = np.sqrt(np.mean((na - x_true) ** 2 + (nb - y_true) ** 2))

rmse_kalman_x = np.sqrt(np.mean((x_predicted - x_true) ** 2))
rmse_kalman_y = np.sqrt(np.mean((y_predicted - y_true) ** 2))
rmse_kalman = np.sqrt(np.mean((x_predicted - x_true) ** 2 + (y_predicted - y_true) ** 2))

print("\nRMSE Summary")
print(f"{'Source':<20} {'X':>10} {'Y':>10} {'Overall':>10}")
print(f"{'Noisy':<20} {rmse_noisy_x:>10.4f} {rmse_noisy_y:>10.4f} {rmse_noisy:>10.4f}")
print(f"{'Kalman Filter':<20} {rmse_kalman_x:>10.4f} {rmse_kalman_y:>10.4f} {rmse_kalman:>10.4f}")

# === 5. Plot Trajectory ===
plt.figure(figsize=(12, 8))
plt.plot(x_true, y_true, 'g-', linewidth=2, label='Ground Truth')
plt.plot(na, nb, 'r.', markersize=4, alpha=0.5, label='Noisy Measurements')
plt.plot(x_predicted, y_predicted, 'b-', linewidth=1.5, label='Kalman Filter')
plt.title('Ball Tracking with Kalman Filter')
plt.xlabel('X Position')
plt.ylabel('Y Position')
plt.legend()
plt.grid(True)
plt.axis('equal')
plt.tight_layout()
plt.savefig('tracking_result.png', dpi=300)
plt.show()

# === 6. Error Plot ===
plt.figure(figsize=(12, 6))

plt.subplot(2, 1, 1)
plt.plot(np.abs(na - x_true), 'r-', label='Noisy X Error')
plt.plot(np.abs(x_predicted - x_true), 'b-', label='Kalman X Error')
plt.title('Absolute X Tracking Error')
plt.legend()
plt.grid(True)

plt.subplot(2, 1, 2)
plt.plot(np.abs(nb - y_true), 'r-', label='Noisy Y Error')
plt.plot(np.abs(y_predicted - y_true), 'b-', label='Kalman Y Error')
plt.title('Absolute Y Tracking Error')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.savefig('tracking_error.png', dpi=300)
plt.show()

# === 7. Parameter Tuning Function ===
def run_kalman_filter(Q_factor, R_factor):
    Q_tuned = Q * Q_factor
    R_tuned = R * R_factor
    x_hat = np.array([na[0], nb[0], 0, 0])
    P = np.eye(4) * 100

    x_pred, y_pred = [], []

    for i in range(len(na)):
        z = np.array([na[i], nb[i]])
        x_hat_minus = F @ x_hat
        P_minus = F @ P @ F.T + Q_tuned
        K = P_minus @ H.T @ np.linalg.inv(H @ P_minus @ H.T + R_tuned)
        x_hat = x_hat_minus + K @ (z - H @ x_hat_minus)
        P = (np.eye(4) - K @ H) @ P_minus
        x_pred.append(x_hat[0])
        y_pred.append(x_hat[1])

    x_pred = np.array(x_pred)
    y_pred = np.array(y_pred)
    rmse = np.sqrt(np.mean((x_pred - x_true) ** 2 + (y_pred - y_true) ** 2))
    return x_pred, y_pred, rmse

# === 8. Parameter Grid Search ===
Q_factors = [0.1, 0.5, 1.0, 2.0]
R_factors = [0.5, 1.0, 2.0, 5.0]
results = []

for qf in Q_factors:
    for rf in R_factors:
        _, _, rmse = run_kalman_filter(qf, rf)
        results.append((qf, rf, rmse))

results.sort(key=lambda x: x[2])
best_Q_factor, best_R_factor, best_rmse = results[0]

print(f"\nParameter tuning results (sorted by RMSE):")
for qf, rf, rmse in results:
    print(f"Q factor: {qf}, R factor: {rf}, RMSE: {rmse:.4f}")

print(f"\nBest parameters: Q factor = {best_Q_factor}, R factor = {best_R_factor}, RMSE = {best_rmse:.4f}")

# === 9. Run Kalman Filter with Tuned Parameters ===
x_best, y_best, _ = run_kalman_filter(best_Q_factor, best_R_factor)

plt.figure(figsize=(12, 8))
plt.plot(x_true, y_true, 'g-', linewidth=2, label='Ground Truth')
plt.plot(na, nb, 'r.', markersize=4, alpha=0.5, label='Noisy Measurements')
plt.plot(x_best, y_best, 'b-', linewidth=1.5, label='Kalman Filter (Tuned)')
plt.title(f'Tuned Kalman Filter (Q={best_Q_factor}, R={best_R_factor})')
plt.xlabel('X Position')
plt.ylabel('Y Position')
plt.legend()
plt.grid(True)
plt.axis('equal')
plt.tight_layout()
plt.savefig('tracking_result_tuned.png', dpi=300)
plt.show()
