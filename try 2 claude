function ball_segmentation_main()
    % Define paths
    dataPath = 'C:\Users\Student\Desktop\New folder\ball_frames.zip';
    extractedFolder = 'C:\Users\Student\Desktop\New folder\ball_frames';
    
    % Extract the zip file
    extractZip(dataPath, extractedFolder);
    
    % Process the images
    processImages(extractedFolder);
end

function extractZip(zipPath, outputFolder)
    % Extract zip file to the specified folder
    if ~exist(outputFolder, 'dir')
        mkdir(outputFolder);
    end
    unzip(zipPath, outputFolder);
    fprintf('Extracted contents of %s to %s\n', zipPath, outputFolder);
end

function dsc = calculateDSC(predMask, gtMask)
    % Calculate Dice Similarity Coefficient (DSC)
    predMaskBinary = predMask > 0;
    gtMaskBinary = gtMask > 0;
    
    intersection = sum(predMaskBinary(:) & gtMaskBinary(:));
    totalPixels = sum(predMaskBinary(:)) + sum(gtMaskBinary(:));
    
    if totalPixels == 0
        dsc = 0.0;
    else
        dsc = (2 * intersection) / totalPixels;
    end
end

function [predMask, originalImg, labeledMask] = segmentBall(imagePath)
    try
        % Read the original image
        originalImg = imread(imagePath);
        hsvImg = rgb2hsv(originalImg);
        
        % Define HSV threshold values (adjust if necessary)
        lowerColor = [0, 0.4, 0.4];
        upperColor = [0.1, 1, 1];
        
        % Create a binary mask based on HSV values
        mask = (hsvImg(:,:,1) >= lowerColor(1) & hsvImg(:,:,1) <= upperColor(1)) & ...
               (hsvImg(:,:,2) >= lowerColor(2) & hsvImg(:,:,2) <= upperColor(2)) & ...
               (hsvImg(:,:,3) >= lowerColor(3) & hsvImg(:,:,3) <= upperColor(3));
        
        % Apply morphological operations
        se = strel('disk', 7);
        predMask = imclose(mask, se);
        predMask = imopen(predMask, se);
        
        % Label connected components
        labeledMask = bwlabel(predMask);
        
    catch ME
        fprintf('Error processing image %s: %s\n', imagePath, ME.message);
        predMask = [];
        originalImg = [];
        labeledMask = [];
    end
end

function processImages(folder)
    imageFiles = dir(fullfile(folder, '*[!_GT].png'));
    if isempty(imageFiles)
        fprintf('No RGB images found in %s\n', folder);
        return;
    end
    
    dscValues = [];
    frameNumbers = [];
    
    for i = 1:length(imageFiles)
        rgbPath = fullfile(folder, imageFiles(i).name);
        baseName = erase(imageFiles(i).name, '.png');
        frameNum = str2double(erase(baseName, 'frame-'));
        
        if isnan(frameNum)
            fprintf('Skipping file with invalid name: %s\n', baseName);
            continue;
        end
        
        gtPath = fullfile(folder, strcat(baseName, '_GT.png'));
        if ~isfile(gtPath)
            fprintf('No ground truth for frame %d\n', frameNum);
            continue;
        end
        
        [predMask, originalImg, labeledMask] = segmentBall(rgbPath);
        if isempty(predMask)
            fprintf('Segmentation failed for frame %d\n', frameNum);
            continue;
        end
        
        gtMask = imread(gtPath);
        gtMask = imbinarize(gtMask);
        
        dsc = calculateDSC(predMask, gtMask);
        dscValues = [dscValues, dsc];
        frameNumbers = [frameNumbers, frameNum];
        fprintf('Frame %d: DSC = %.4f\n', frameNum, dsc);
    end
    
    if isempty(dscValues)
        fprintf('No valid DSC values computed. Check your input images and segmentation.\n');
        return;
    end
    
    fprintf('Mean DSC: %.4f\n', mean(dscValues));
    fprintf('Standard Deviation of DSC: %.4f\n', std(dscValues));
    
    % Plot DSC values
    figure;
    bar(frameNumbers, dscValues);
    xlabel('Image Number (Index)');
    ylabel('Dice Similarity Coefficient (DSC)');
    title('DSC Values for Each Image');
end

% Run the main function
ball_segmentation_main();

