import os
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from pydmps.dmp_discrete import DMPs_discrete

# Folder and files
demo_folder = r"C:\Users\Student\Desktop\Assessment Item 2 - datasets\datasets"
trajectory_files = ["CShape.csv", "Line.csv", "WShape.csv", "SShape.csv"]

# RMSE function
def compute_rmse(y_true, y_pred):
    return np.sqrt(np.mean(np.sum((y_true - y_pred) ** 2, axis=1)))

# Loop through each dataset
for demo_file in trajectory_files:
    file_path = os.path.join(demo_folder, demo_file)
    if not os.path.exists(file_path):
        print(f"Skipping {demo_file} – File not found.")
        continue

    # Load trajectory
    y_demo = np.loadtxt(file_path, delimiter=",").T
    if y_demo.shape[0] < 2:
        print(f"Skipping {demo_file} – Too few data points.")
        continue

    print(f"\nProcessing {demo_file} ...")
    
    y_demo_trimmed = y_demo[:-1]
    timesteps = len(y_demo_trimmed)
    dt = 1.0 / timesteps

    n_bfs_list = list(range(10, 301, 10))
    rmse_list = []
    trajectories = []

    for n_bfs in n_bfs_list:
        dmp = DMPs_discrete(n_dmps=2, n_bfs=n_bfs, dt=dt)
        dmp.y0 = y_demo[0]
        dmp.goal = y_demo[-1]
        dmp.timesteps = timesteps

        dmp.imitate_path(y_des=y_demo_trimmed.T)
        y_pred, _, _ = dmp.rollout()

        rmse = compute_rmse(y_demo_trimmed, y_pred)
        rmse_list.append(rmse)
        trajectories.append(y_pred)

        print(f"{demo_file}: n_bfs = {n_bfs:3d} → RMSE = {rmse:.4f}")

    # Best trajectory plot
    best_idx = np.argmin(rmse_list)
    best_n_bfs = n_bfs_list[best_idx]
    best_pred = trajectories[best_idx]
    rmse_best = rmse_list[best_idx]

    plt.figure(figsize=(6, 5))
    plt.plot(y_demo_trimmed[:, 0], y_demo_trimmed[:, 1], 'k--', label='Demonstration')
    plt.plot(best_pred[:, 0], best_pred[:, 1], 'b-', label=f'DMP (n_bfs={best_n_bfs})')
    plt.scatter(*y_demo[0], c='g', label='Start')
    plt.scatter(*y_demo[-1], c='r', label='Goal')
    plt.title(f"{demo_file[:-4]} - Best DMP Trajectory\nRMSE = {rmse_best:.4f}")
    plt.xlabel("X")
    plt.ylabel("Y")
    plt.axis("equal")
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.savefig(f"{demo_file[:-4]}_best_dmp_trajectory.png", dpi=300)
    plt.show()

    # RMSE vs n_bfs plot
    plt.figure(figsize=(6, 4))
    plt.plot(n_bfs_list, rmse_list, marker='o', linestyle='-')
    plt.title(f"{demo_file[:-4]} - RMSE vs. Number of Basis Functions")
    plt.xlabel("n_bfs")
    plt.ylabel("RMSE")
    plt.grid(True)
    plt.tight_layout()
    plt.savefig(f"{demo_file[:-4]}_rmse_vs_n_bfs.png", dpi=300)
    plt.show()

    # Export RMSE data
    df = pd.DataFrame({"n_bfs": n_bfs_list, "RMSE": rmse_list})
    df.to_csv(f"{demo_file[:-4]}_rmse_data.csv", index=False)
