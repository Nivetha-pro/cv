import cv2
import numpy as np
import os
import glob
import matplotlib.pyplot as plt
from skimage.measure import label, regionprops

def ball_segmentation(image_path):
    """Segment colored balls in an image using color-based thresholding."""
    img = cv2.imread(image_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    hsv = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)
    
    # Define color ranges for different balls
    masks = [
        cv2.inRange(hsv, np.array([0, 100, 100]), np.array([10, 255, 255])),    # Red (low)
        cv2.inRange(hsv, np.array([160, 100, 100]), np.array([180, 255, 255])), # Red (high)
        cv2.inRange(hsv, np.array([100, 100, 100]), np.array([140, 255, 255])), # Blue
        cv2.inRange(hsv, np.array([40, 100, 100]), np.array([80, 255, 255])),   # Green
        cv2.inRange(hsv, np.array([20, 100, 100]), np.array([35, 255, 255])),   # Yellow
        cv2.inRange(hsv, np.array([10, 100, 100]), np.array([20, 255, 255])),   # Orange
        cv2.inRange(hsv, np.array([140, 50, 100]), np.array([170, 255, 255]))   # Pink/purple
    ]
    
    # Combine masks and apply morphological operations
    combined_mask = np.zeros_like(masks[0])
    for mask in masks:
        combined_mask = combined_mask | mask
        
    kernel = np.ones((5, 5), np.uint8)
    mask_cleaned = cv2.morphologyEx(combined_mask, cv2.MORPH_OPEN, kernel)
    mask_cleaned = cv2.morphologyEx(mask_cleaned, cv2.MORPH_CLOSE, kernel)
    
    # Remove small regions
    labeled_mask = label(mask_cleaned)
    clean_mask = np.zeros_like(mask_cleaned)
    for prop in regionprops(labeled_mask):
        if prop.area >= 200:  # Minimum ball size
            clean_mask[labeled_mask == prop.label] = 255
            
    return clean_mask, img  # Return both the mask and original image

def calculate_dsc(pred_mask, gt_mask):
    """Calculate Dice Similarity Coefficient."""
    pred_mask = pred_mask > 0
    gt_mask = gt_mask > 0
    
    intersection = np.logical_and(pred_mask, gt_mask).sum()
    union = pred_mask.sum() + gt_mask.sum()
    
    return (2.0 * intersection) / union if union > 0 else 1.0 if intersection == 0 else 0.0

def visualize_results(original, pred_mask, gt_mask, dsc, frame_num, save_path, show=False):
    """Create visualization of results with original image, predictions, and ground truth."""
    # Create overlay of prediction on original image
    pred_overlay = original.copy()
    pred_mask_rgb = np.zeros_like(original)
    pred_mask_rgb[:,:,1] = pred_mask * 255  # Green channel for predictions
    pred_overlay = cv2.addWeighted(pred_overlay, 0.7, pred_mask_rgb, 0.3, 0)
    
    # Create overlay of ground truth on original image
    gt_overlay = original.copy()
    gt_mask_rgb = np.zeros_like(original)
    gt_mask_rgb[:,:,0] = gt_mask * 255  # Red channel for ground truth
    gt_overlay = cv2.addWeighted(gt_overlay, 0.7, gt_mask_rgb, 0.3, 0)
    
    # Combined visualization
    fig, axes = plt.subplots(1, 3, figsize=(18, 6))
    axes[0].imshow(original)
    axes[0].set_title("Original Image")
    axes[0].axis('off')
    
    axes[1].imshow(pred_overlay)
    axes[1].set_title(f"Prediction (DSC: {dsc:.4f})")
    axes[1].axis('off')
    
    axes[2].imshow(gt_overlay)
    axes[2].set_title("Ground Truth")
    axes[2].axis('off')
    
    plt.tight_layout()
    plt.savefig(save_path, dpi=300)
    
    if show:
        plt.show()
    else:
        plt.close()

def main():
    # Setup paths
    data_dir = "ball_frames"
    rgb_files = sorted(glob.glob(os.path.join(data_dir, "*[!_GT].png")))
    
    results = {}
    dsc_values = []
    
    # Process images
    for rgb_path in rgb_files:
        base_name = os.path.basename(rgb_path).split('.')[0]
        frame_num = int(base_name.replace("frame-", ""))
        
        # Find corresponding ground truth
        gt_path = os.path.join(data_dir, f"{base_name}_GT.png")
        if not os.path.exists(gt_path):
            print(f"No ground truth for frame {frame_num}")
            continue
            
        # Process image and calculate DSC
        pred_mask, original_img = ball_segmentation(rgb_path)
        gt_mask = cv2.imread(gt_path, cv2.IMREAD_GRAYSCALE)
        dsc = calculate_dsc(pred_mask, gt_mask)
        
        dsc_values.append(dsc)
        results[frame_num] = {
            'rgb_path': rgb_path,
            'original_img': original_img,
            'pred_mask': pred_mask,
            'gt_mask': gt_mask,
            'dsc': dsc
        }
        print(f"Frame {frame_num}: DSC = {dsc:.4f}")
    
    # Calculate statistics
    mean_dsc = np.mean(dsc_values)
    std_dsc = np.std(dsc_values)
    print(f"Mean DSC: {mean_dsc:.4f} ± {std_dsc:.4f}")
    
    # Create output directories
    os.makedirs("results", exist_ok=True)
    os.makedirs("results/best", exist_ok=True)
    os.makedirs("results/worst", exist_ok=True)
    
    # Plot DSC bar chart
    plt.figure(figsize=(10, 6))
    plt.bar(sorted(results.keys()), [results[k]['dsc'] for k in sorted(results.keys())])
    plt.xlabel('Image Index')
    plt.ylabel('DSC')
    plt.title(f'Segmentation Results: Mean DSC = {mean_dsc:.4f} ± {std_dsc:.4f}')
    plt.ylim(0, 1)
    plt.grid(axis='y', alpha=0.7)
    plt.savefig('results/dsc_plot.png', dpi=300)
    plt.show()  # Display the DSC plot
    
    # Get best and worst frames
    frames_by_dsc = sorted(results.keys(), key=lambda k: results[k]['dsc'])
    worst_frames = frames_by_dsc[:5]
    best_frames = frames_by_dsc[-5:]
    
    print(f"Best frames: {best_frames}")
    print(f"Worst frames: {worst_frames}")
    
    # Visualize best frames
    print("\nDisplaying best frames...")
    for i, frame_num in enumerate(best_frames):
        frame_data = results[frame_num]
        save_path = f"results/best/frame_{frame_num}_dsc_{frame_data['dsc']:.4f}.png"
        visualize_results(
            frame_data['original_img'],
            frame_data['pred_mask'],
            frame_data['gt_mask'],
            frame_data['dsc'],
            frame_num,
            save_path,
            show=True  # Show the best frames
        )
    
    # Visualize worst frames
    print("\nDisplaying worst frames...")
    for i, frame_num in enumerate(worst_frames):
        frame_data = results[frame_num]
        save_path = f"results/worst/frame_{frame_num}_dsc_{frame_data['dsc']:.4f}.png"
        visualize_results(
            frame_data['original_img'],
            frame_data['pred_mask'],
            frame_data['gt_mask'],
            frame_data['dsc'],
            frame_num,
            save_path,
            show=True  # Show the worst frames
        )
    
    # Create summary visualization of best and worst frames
    print("\nDisplaying summary of best and worst frames...")
    plt.figure(figsize=(15, 10))
    
    # Plot best frames
    for i, frame_num in enumerate(best_frames):
        plt.subplot(2, 5, i+1)
        plt.imshow(results[frame_num]['original_img'])
        plt.title(f"Best #{i+1}: Frame {frame_num}\nDSC: {results[frame_num]['dsc']:.4f}")
        plt.axis('off')
    
    # Plot worst frames
    for i, frame_num in enumerate(worst_frames):
        plt.subplot(2, 5, 5+i+1)
        plt.imshow(results[frame_num]['original_img'])
        plt.title(f"Worst #{i+1}: Frame {frame_num}\nDSC: {results[frame_num]['dsc']:.4f}")
        plt.axis('off')
    
    plt.tight_layout()
    plt.savefig('results/best_worst_summary.png', dpi=300)
    plt.show()  # Display the summary

if __name__ == "__main__":
    main()
